var documenterSearchIndex = {"docs":
[{"location":"toc.html","page":"Table of Contents","title":"Table of Contents","text":"","category":"page"},{"location":"conditions.html#Actions-and-Conditions-you-can-use-in-recipes","page":"Conditions and Actions for use in recipes","title":"Actions and Conditions you can use in recipes","text":"","category":"section"},{"location":"conditions.html#Actions","page":"Conditions and Actions for use in recipes","title":"Actions","text":"","category":"section"},{"location":"conditions.html","page":"Conditions and Actions for use in recipes","title":"Conditions and Actions for use in recipes","text":"whitespace_to\nquit\nproceed\nfilename\nshow_warning\nquit_on_fail\nlog_to_file\nignore\nsample\nsize_of_file\nadd_path_to_file_list\nremove\ndelete_file\ndelete_folder\npath_only\nshow_warning\nlog_to_file_with_message\nremove_from_to\nremove_from_to_extension_inclusive\nremove_from_to_extension_exclusive\nremove_from_to_exclusive\nremove_from_to_inclusive\nremove_pattern\nreplace_pattern\nreduce_images\nconcat_table\nextract_columns\nstack_images\nreduce_image + maximum, minimum, median, mean + dim : 1-N","category":"page"},{"location":"conditions.html#Conditions","page":"Conditions and Actions for use in recipes","title":"Conditions","text":"","category":"section"},{"location":"conditions.html","page":"Conditions and Actions for use in recipes","title":"Conditions and Actions for use in recipes","text":"is_csv_file\nis_tif_file\nis_png_file\ninteger_name\nis_lower\nis_upper\nhas_whitespace\nis_img\nis_kd_img\nis_2d_img\nis_3d_img\nis_rgb\nis_rgb\nread_dir\nfiles\nhas_n_files\nn_files_or_more\nless_than_n_files\nsubdirs\nhas_n_subdirs\nalways\nnever\nread_postfix_int\nread_prefix_int\nread_int\nread_postfix_float\nread_prefix_float\nread_float\nis_8bit_img\nis_16bit_img\ncolumn_names\nhas_n_columns\nless_than_n_subdirs\nis_hidden[_dir, _file]","category":"page"},{"location":"conditions.html","page":"Conditions and Actions for use in recipes","title":"Conditions and Actions for use in recipes","text":"If you're not familiar with Julia, the following are builtin","category":"page"},{"location":"conditions.html","page":"Conditions and Actions for use in recipes","title":"Conditions and Actions for use in recipes","text":"maximum/minimum/median/mean\nsize\nisfile\nisdir\nispath\nsplitpath\nsplitdir\nsplitext\nbasename\nlength\nsum\nisnothing","category":"page"},{"location":"usage.html#Usage","page":"-","title":"Usage","text":"","category":"section"},{"location":"usage.html#Using-recipes-only","page":"-","title":"Using recipes only","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"./DataCurator.sif -r myrecipe.toml [---verbose]","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"or a bit more advanced:","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"singularity exec DataCurator.sif julia --project=/opt/DataCurator.jl --sysimage /opt/DataCurator.jl/sys_img.so /opt/DataCurator.jl/src/curator.jl --recipe myrecipe.toml","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"You can see why we made the executable image with the very short command, right?","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"However, it can be useful to explore the package more inside the singularity image","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"singularity exec DataCurator.sif julia <your script>","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"You can also open a shell inside the image","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"singularity shell DataCurator.sif\nsingularity>julia\njulia 1.x>","category":"page"},{"location":"usage.html#Recipes-Julia","page":"-","title":"Recipes + Julia","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"Either run this in the image, or with the package","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"using DataCurator\nresult = create_template_from_toml(\"recipe.toml\")\nif ~isnothing(result) # result will be nothing if something went wrong creating your template\n  c, t = res\n  counters, lists, returnvalue = delegate(c, t)\nend","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"See the API reference for full details.","category":"page"},{"location":"usage.html#Using-the-Julia-API-a-name\"julia\"/a","page":"-","title":"Using the Julia API <a name=\"julia\"></a>","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"When you can write Julia you can do anything the template recipes allow and extend it with your own functions, compile more complex functions, and so forth. In this section we'll walk you through how to do this.","category":"page"},{"location":"usage.html#Typesafe-templates","page":"-","title":"Typesafe templates","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"We heavily use Julia's multiple type dispatch system, so when you make a template","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"template = [mt(is_tif_file, show_warning)]","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"it is internally transformed to a named tuple","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"template[1].condition == is_tif_file # true\ntemplate[1].action == show_warning","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"As a user this may not be relevant to you, but it does help in simplifying the code and optimizing the execution quite dramatically. The Julia compiler for example knows the difference at compile time between","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"fs = [is_tif_file, show_warning, quit]\nA = mt(fs...) # condition, action, counteraction\nfs = [is_tif_file, show_warning]\nB = mt(fs...) # condition, action","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"A and B are resolved at compile time, not at runtime, improving execution speed while ensuring type safety.","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"To put it differently, your template is usually precompiled, not interpreted, as it would be in bash/Python scripts.","category":"page"},{"location":"usage.html#Examples","page":"-","title":"Examples","text":"","category":"section"},{"location":"usage.html#Replace-whitespace-and-uppercase","page":"-","title":"Replace whitespace and uppercase","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"Rename all files/directories with ' ' in them to '_' and switch any uppercase to lowercase.","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"condition = x -> is_upper(x) | has_whitespace(x)\nfix = x -> whitespace_to(lowercase(x), '_')\naction = x -> transform_inplace(x, fix)\ntransform_template(rootdirectory, [mt(condition, action)]; act_on_success=true)","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"Next, we verify our dataset has no uppercase/whitespace in names.","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"count, counter = generate_counter()\nverify_template(rootdirectory, [mt(condition, counter)]; act_on_success=true)\n@info count","category":"page"},{"location":"usage.html#Flatten-a-file-hierarchy","page":"-","title":"Flatten a file hierarchy","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"action = x->flatten_to(root, x, newdirectory)\nverify_template(root, [mt(isfile, action)]; act_on_success=true)","category":"page"},{"location":"usage.html#Extract-all-3D-tif-files-to-a-single-directory","page":"-","title":"Extract all 3D tif files to a single directory","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"Note, this will halt if the images it extracts exist on the target directory.","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"trigger = x-> is_3d_img(x)\naction = x->flatten_to(root, x, image_directory)\nverify_template(root, [mt(trigger, action)]; act_on_success=true)","category":"page"},{"location":"usage.html#Sort-2D-image-and-csv-files-into-separate-directories","page":"-","title":"Sort 2D image and csv files into separate directories","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"img_action = x->flatten_to(root, x, image_directory)\ncsv_action = x->flatten_to(root, x, csv_directory)\nverify_template(root, [(mtis_2d_img, img_action), (is_csv_file, csv_action)]; act_on_success=true)","category":"page"},{"location":"usage.html#Compute-size-in-bytes-of-a-large-hierarchy-in-parallel","page":"-","title":"Compute size in bytes of a large hierarchy in parallel","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"count, counter = generate_size_counter()\nverify_template(\"rootdirectory\", [mt(isfile, counter)]; act_on_success=true)\n@info \"Size of matched files = $(count) bytes\"","category":"page"},{"location":"usage.html#Compute-size-of-2-vs-3D-images-separately","page":"-","title":"Compute size of 2 vs 3D images separately","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"count2, counter2 = generate_size_counter()\ncount3, counter3 = generate_size_counter()\nverify_template(\"rootdirectory\", [mt(is_2d_img, counter2),(is_3d_img, counter3)]; act_on_success=true)\n@info \"$(count2) bytes of 2D images, $(count3) of 3D images\"","category":"page"},{"location":"usage.html#Hierarchical-recipes","page":"-","title":"Hierarchical recipes","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"Suppose your data is supposed to have this layout","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"root\nreplicate nr\ncelltype\ncell nr : of the form \"Series XYZ\"\n2 tif files, 3D, ending with 1,2.tif","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"You can use hierarchical templates, that give you very precise control of where a condition fires","category":"page"},{"location":"usage.html#Create-a-hierarchical-template","page":"-","title":"Create a hierarchical template","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"onfail = x->show_warning\ntemplate = Dict()","category":"page"},{"location":"usage.html#First,-define-what-to-do-with-unexpected-directories/files","page":"-","title":"First, define what to do with unexpected directories/files","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"template[-1] = [mt(never, onfail)]","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"never is a shortcode symbol for 'will never pass'","category":"page"},{"location":"usage.html#At-root,-we-only-expect-sub-directories","page":"-","title":"At root, we only expect sub directories","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"template[1] = [mt(isdir, onfail)]","category":"page"},{"location":"usage.html#Replicate-should-be-integer","page":"-","title":"Replicate should be integer","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"template[2] = [mt(x->all_of(x, [isdir, integer_name]), onfail)]","category":"page"},{"location":"usage.html#Celltype-should-only-be-subdirs","page":"-","title":"Celltype should only be subdirs","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"template[3] = [mt(isdir, onfail)]","category":"page"},{"location":"usage.html#Lowest-data-directory-should-end-with-cell-nr,-and-have-2-or-more-files","page":"-","title":"Lowest data directory should end with cell nr, and have 2 or more files","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"inputdir_check = x->all_of(x, [isdir, x->ends_with_integer(x), x->n_files_or_more(x, 2)])\ntemplate[4] = [mt(inputdir_check, onfail)]","category":"page"},{"location":"usage.html#Actual-files-should-be-3D-images","page":"-","title":"Actual files should be 3D images","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"file_check = x -> is_tif_file(x) & is_3d_img(x) & endswith(x, r\"[1,2].tif\")\ntemplate[5] = [mt(file_check, onfail)]","category":"page"},{"location":"usage.html#Execute","page":"-","title":"Execute","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"verify_template(root, template; traversalpolicy=topdown, parallel_policy=\"parallel\")","category":"page"},{"location":"usage.html#Advanced","page":"-","title":"Advanced","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"You are free to define even more complex actions, for example, triggers that fire on invalid data AND valid data in 1 template. For example, let's say we expect csv files, and if we find tif files, then we delete those, otherwise we just warn.","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"template[y] = [mt(x->~is_tif_file(x), delete_file), mt(is_csv_file, onfail)]","category":"page"},{"location":"usage.html#Fire-triggers-when-they-are-true,-not-when-they-fail","page":"-","title":"Fire triggers when they are true, not when they fail","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"If it's hard to define conditions that should succeed, you can reverse the firing conditions, but more easily readable is just asking the verifier to do so for you","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"verify_template(root, template; act_on_succes=true)","category":"page"},{"location":"usage.html#Parallel-execution","page":"-","title":"Parallel execution","text":"","category":"section"},{"location":"usage.html","page":"-","title":"-","text":"All recipes can be executed in parallel. Counters are protected so they are threadsafe, yet need no locks.","category":"page"},{"location":"usage.html","page":"-","title":"-","text":"count, counter = generate_counter(true; incrementer=size_of_file)\nverify_template(\"rootdirectory\", [mt(condition, counter)]; parallel_policy=\"parallel\", act_on_success=true)\n@info \"Size of matched files = $(count) bytes\"","category":"page"},{"location":"documented_recipe.html#A-recipe-using-all/most-of-the-possible-features","page":"Documented recipe with all features","title":"A recipe using all/most of the possible features","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"First, a recipe is a plain text file, in TOML format, designed to be as human friendly as possible.","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"We'll run through all, or most of the features you can use, with example TOML snippets.","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"Any recipe needs 2 parts, the global configuration, and the actual template.","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"The global configuration specifies how the template is applied, the template specifies the conditions/rules to apply, i.o.w. the what and when.","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"A section in a TOML file is simply:","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"[mysectionname]\nmycontent=\"some value\"","category":"page"},{"location":"documented_recipe.html#Global-section","page":"Documented recipe with all features","title":"Global section","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"[global]","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"All a minimum global section needs is where to start:","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"inputdirectory=\"your/directory\"","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"Next, we can either act on failure (usually in validation), or on success. This simply means that, if set to false, we check for any data that fails the rule you specify, then execute your actions. In datacuration you'll want the inverse, namely, act on success.","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"tip: You can have your cake and eat it\nYou can specify actions AND counter_actions, allowing you to specify what to do if a rule applies, and what if it doesn't. In other words, you have maximal freedom of expression.","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"act_on_success=false # default","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"We can also specify how we traverse data, from the deepest to the top (bottomup), or topdown. If you intend to modify files/directories in place, bottomup is the safer option.","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"traversal=\"bottomup\" # or topdown","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"We can validate or curate data in parallel, to maximize throughput. Especially on computing clusters this can speed up completion time. If true, will use as many threads as JULIA_NUM_THREADS (usually nr of HT cores).","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"note: Thread safety\nYou do not need to worry about data races, where you get non-deterministic or corrupt results, if you stick to our conditions and aggregations, there are no conflicts between threads.","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"parallel=true #default false","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"By default your rules are applied without knowing how deep your are in your dataset. However, at times you will need to know this, for example, to verify that certain files only appear in certain locations, or check naming patterns of directories. For example, a path like top/celltype/cellnr will have a rule to check for a cell number (integer) at level 3, not anywhere else. To enable this:","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"# If true, your template is more precise, because you know what to look for at certain levels [level_i]\n# If false, define your template in [any]\nhierarchical=true","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"For more complex pattern matching you may want to use Regular Expressions (regex), to enable this:","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"# If true, functions accepting patterns (endswith, startswith), will have their argument converted to a regular expression (using PRCE syntax)\nregex = false","category":"page"},{"location":"documented_recipe.html#Aggregation","page":"Documented recipe with all features","title":"Aggregation","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"Aggregation is a complex word for use case like:","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"counting certain files\ncounting total size of a selection of files\nmaking lists of input/output pairs for pipelines\ncombining 2D images into 1 3D image\nselecting specific columns from each csv you find, and fusing all in 1 table\n...","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"You can do any of these all at the same time with counters and file_lists in the global section:","category":"page"},{"location":"documented_recipe.html#Counters","page":"Documented recipe with all features","title":"Counters","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"counters = [\"C1\", [\"C2\", \"size_of_file\"]]","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"Here we created 2 counters, one that is incremented whenever you refer to it, and one that when you pass it a fily, records it total size in bytes. When the program finishes, these counters are printed.","category":"page"},{"location":"documented_recipe.html#Files-to-process","page":"Documented recipe with all features","title":"Files to process","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"The simplest kind just adds a file each time you refer to it, and writes them out in traversal order (per thread if parallel) at the end to \"infiles.txt\"","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"file_lists = [\"infiles\"]","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"To make input-output pairs you'd do","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"file_lists = [\"infiles\", [\"outfiles\", \"outputpath\"]]","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"Let's say we add a file \"a/b/c.txt\" to infiles, when we add it to outfiles it will be recorded as: \"/outputpath/a/b/c.txt\" This is a common use case in preparing large batch scripts on SLURM clusters.","category":"page"},{"location":"documented_recipe.html#Image-aggregation","page":"Documented recipe with all features","title":"Image aggregation","text":"","category":"section"},{"location":"documented_recipe.html#Stacking-2D-images","page":"Documented recipe with all features","title":"Stacking 2D images","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"file_lists = [{name=\"3dstack.tif\", aggregator=\"stack_images\"}]","category":"page"},{"location":"documented_recipe.html#Maximum-projection-of-3D-images-along-the-Y-axis,-then-stack-them.","page":"Documented recipe with all features","title":"Maximum projection of 3D images along the Y axis, then stack them.","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"file_lists = [{name=\"3dstack.tif\", transformer=[\"reduce_images\", [\"maximum\", 2]],aggregator=\"stack_images\"}]","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"And so on ...","category":"page"},{"location":"documented_recipe.html#Table-aggregation","page":"Documented recipe with all features","title":"Table aggregation","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"file_lists = [{name=\"all_ab_columns.csv\", transformer=[\"extract_columns\", [\"A\", \"B\"]], aggregator=\"concat_to_table\"}]","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"...","category":"page"},{"location":"documented_recipe.html#Template","page":"Documented recipe with all features","title":"Template","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"A template has 2 kind of entries [any] and [level_X]. You will only see the level_X entries in hierarchical templates, then X specifies at which depth you want to check a rule.","category":"page"},{"location":"documented_recipe.html#Flat-templates,-the-Any-section","page":"Documented recipe with all features","title":"Flat templates, the Any section","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"[any]\nall=false #default, if true, fuses all conditions and actions. If false, you list condition-action pairs.\nconditions=[\"is_tif_file\", [\"has_n_files\", 10]]\nactions=[\"show_warning\", [\"log_to_file\", \"decathlon.txt\"]]\ncounter_actions=[[\"add_to_file_list\", \"mylist\"], [\"log_to_file\", \"not_decathlon.txt\"]] ## Optional","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"Here the add_to_file_list will pass any file or directory for which is_tif_file = true (see act_on_success) to a list you defined earlier called \"mylist\". You specified in the global section what needs to be done with those files at the end. You do not need counter_actions.","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"tip: Negation and logical and\nYou can also negate and fuse conditions/actions. Actions can not be negated.conditions=[[\"not\", \"is_tif_file\"], [\"all\", \"is_2d_img\", \"is_rgb\"]]]This is useful if you want to check for multiple things, but each can be quite complex. In other words, you want pairs of condition-action, so all=false, yet each pair is a complex rule.","category":"page"},{"location":"documented_recipe.html#Hierarchical-templates,-with-level_X","page":"Documented recipe with all features","title":"Hierarchical templates, with level_X","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"All you now need to add is what to do at level 'X'","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"[global]\nhierarchical=true\n...\n[level_3]\nconditions=...\nactions=...\n...","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"This will only be applied if, and only if, files and directories 3 levels (directories) deep are encountered.","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"Sometimes you do not know how deep your dataset can be, in that case you'll want a 'catch-all', in hierarchical templates this is now the role of any","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"[global]\nact_on_success=true\n[any]\nconditions=[\"is_csv_file\"]\nactions=[\"show_warning\"]\n[level_3]\nconditions=[\"is_tif_file\", \"is_csv_file\"]\nactions=[[\"log_to_file\", \"tiffiles.txt\"], \"show_warning\"]","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"This tiny template will write any tif file to tiffiles.txt. If it encounters csv files anywhere else, it will warn you.","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"Please see the directory example_recipes for more complex examples.","category":"page"},{"location":"documented_recipe.html#Advanced-usage","page":"Documented recipe with all features","title":"Advanced usage","text":"","category":"section"},{"location":"documented_recipe.html#Verify-a-complex,-deep-dataset-layout.","page":"Documented recipe with all features","title":"Verify a complex, deep dataset layout.","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"This is the same as the Julia API equivalent below, but then in toml recipe","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"  [global]\n  act_on_success=false\n  hierarchical=true\n  inputdirectory = \"inputdirectory\"\n  ## Suppose we expect 2 3D channels (tif) for each cell, and we have a dataset like\n  ## Root\n  ###  Replicatenr\n  ####  Celltype\n  #####  Series cellnr\n  ######  ...[1,2].tif\n\n  # For now we just want a warning when the data does not like it should be\n\n  ## If we see anything else than the structure below, complain\n  [any]\n  conditions=[\"never\"]\n  actions = [\"show_warning\"]\n  ## Top directory, only sub directories\n  [level_1]\n  conditions=[\"isdir\"]\n  actions = [\"show_warning\"]\n  ## Replicate directory, should be an integer\n  [level_2]\n  all=true\n  conditions=[\"isdir\", \"integer_name\"]\n  actions = [\"show_warning\"]\n  ## We don't care what cell types are named, as long as there's not unexpected data\n  [level_3]\n  conditions=[\"isdir\"]\n  actions = [\"show_warning\"]\n  ## Final level, directory with 2 files, and should end with cell nr\n  [level_4]\n  all=true\n  conditions=[\"isdir\", [\"has_n_files\", 2], [\"ends_with_integer\"]]\n  actions = [\"show_warning\"]\n  ## The actual files, we complain if there's any subdirectories, or if the files are not 3D\n  [level_5]\n  all=true\n  conditions=[\"is_3d_img\", [\"endswith\", \"[1,2].tif\"]]\n  actions = [\"show_warning\"]\n  ```\n##### Early exit:\nsometimes you want the validation or processing to stop immediately based on a condition, e.g. finding corrupt data, or because you're just looking for 1 specific type of conditions. This can be achieved fairly easily, illustrated with a trivial example that stops after finding something other than .txt files.\n  ```toml\n  [global]\n  act_on_success = false\n  inputdirectory = \"testdir\"\n  [any]\n  all = true\n  conditions = [\"isfile\", [\"endswith\", \".txt\"]]\n  actions = [\"halt\"]\n  ```\n##### Regular expressions:\nFor more advanced users, when you write \"startswith\" \"*.txt\", it will not match anything, because by default regular expressions are disabled. Enabling them is easy though\n  ```toml\n  [global]\n  regex=true\n  ...\n  condition = [\"startswith\", \"[0-9]+\"]\n  ```\n  This will now match files with 1 or more integers at the beginning of the file name. **Note** If you try to pass a regex such as *.txt, you'll get an error complaining about PCRE not being able to compile your Regex. The reason for this is the lookahead/lookback functionality in the Regex engine not allowing such wildcards at the beginning of a regex. When you write *.txt, what you probably meant was 'anything with extension txt', but not the name \".txt\", which \" *.txt \" will also match. Instead, use \"\\.\\*.txt\". When in doubt, don't use a regex if you can avoid it. Similar to Kruger-Dunning, those who believe they can wield a regex with confidence, probably shouldn't.\n\n##### Negating conditions:\nBy default your conditions are 'OR'ed, and by setting all=yes, you have 'AND'. By flipping action_on_succes you can negate all conditions. So in essence you don't need more than that for all combinations, but if you need to specifically flip 1 condition, this will get messy. Instead, you can negate any condition by giving it a prefix argumet of \"not\".\n  ```toml\n  [global]\n  act_on_success = true\n  inputdirectory = \"testdir\"\n  regex=true\n  [any]\n  all=true\n  conditions = [\"isfile\", [\"not\", \"endswith\", \".*.txt\"]]\n  actions = [[\"flatten_to\", \"outdir\"], \"show_warning\"]\n  ```\n\n##### Counteractions:\nWhen you're validating you'll want to warn/log invalid files/folders. But at the same time, you may want to do the actual preprocessing as well. This is where counteractions come in, they allow you to specify\n  - Do x when condition = true\n  - Do y when condition = false\n  A simple example, filtering by file type:\n  ```toml\n  [global]\n  act_on_success=true\n  inputdirectory = \"testdir\"\n  [any]\n  conditions=[\"is_csv_file\"]\n  actions=[[\"log_to_file\", \"csvs.txt\"]]\n  counter_actions = [[\"log_to_file\", \"non_csvs.txt\"]]\n  ```\n  or another use case is deleting a file that's incorrect, while transforming correct files in preparation for a pipeline, in 1 step.\n\n##### Export to HDF5/MAT\n  ```toml\n  [global]\n  act_on_success=true\n  inputdirectory = \"testdir\"\n  [any]\n  conditions = [\"is_tif_file\", \"is_csv_file\"]\n  actions=[[\"add_to_hdf5\", \"img.hdf5\"], [\"add_to_mat\", \"csv.mat\"]]\n  ```\n\n## Modifying files and content\nWhen you want precise control over what function runs on the content, versus the name of files, you can do so.\nThis example finds all 3D tif files, does a median projection along Z, then masks (binarizes) the image as a copy with original filename in lowercase.","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"toml [global] actonsuccess=true inputdirectory = \"testdir\" [any] conditions=[\"is3dimg\"] actions=[{nametransform=[\"tolowercase\"], contenttransform=[[\"reduce_image\", [\"maximum\", 2]], \"mask\"], mode=\"copy\"}]","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"The examples so far use `syntactic sugar`, they're shorter ways of writing the below, but in certain case where you need to get a lot done, this full syntax is more descriptive, and less error prone.\nIt also gives DataCurator the opportunity to save otherwise excessive intermediate copies.\n\nThe full syntax for actions of this kind:","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"toml actions=[{nametransform=[entry+], contenttransform=[entry+], mode=\"copy\" | \"move\" | \"inplace\"}+]","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"Where `entry` is any set of functions with arguments. The + sign indicates \"one or more\".\nThe | symbol indicates 'OR', e.g. either copy, move, or inplace.\n\n### Aggregation <a name=\"mapreduce\"></a>\nWhen you need group data before processing it, such as collecting files to count their size, write input-output pairs, or stack images, and so forth, you're performing a pattern of the form","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"julia output = reduce(aggregator, map(transform, filter(test, data)))","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"Sounds complex, but it's intuitive, you\n- collect data based on some condition (filter)\n- transform it in some way (e.g. mask images, copy, ...)\n- group the output and reduce it (all filenames to 1 file, ...)\n\nExamples of this use case:\n- Collect all CSV files, concat to 1 table\n- Collect columns \"x2\" and \"x3\" of CSV files whose name contains \"infected_C19\", and concat to 1 table\n- Collect all 2D images, and save to 1 3D stack\n- Collect all 3D images, and save maximum/minimum/mean/median projection\n\nThe 2nd example is simply:","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"toml [global] ... filelists=[{name=\"group\", transformer=[\"extractcolumns\", [\"x2\", \"x3\"]], aggregator=\"concattotable\"}] ... [any] all=true conditions=[\"iscsvfile\", [\"contains\", \"infectedC19\"]] actions=[[\"addtofilelist\", \"group\"]]","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"\n#### The maximum projection of 2D images\n","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"toml [global] ... filelists=[{name=\"group\", aggregator=[\"reduceimages\", \"maximum\"]}] ... [any] conditions=[\"is2dimg\"] actions=[[\"addtofile_list\", \"group\"]]","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"\n#### The complete grammar:\n\n","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"toml filelists=[{name=name, transformer=identity, aggregator=sharedlisttofile}+]","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"(X+) indicates at least one of X\n\nThe following aliases save you typing:","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"toml file_lists=[\"name\"]","category":"page"},{"location":"documented_recipe.html#is-the-same-as","page":"Documented recipe with all features","title":"is the same as","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"filelists=[{name=name, transformer=identity, aggregator=sharedlisttofile}]","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"toml filelists=[[\"name\", \"somedirectory\"]]","category":"page"},{"location":"documented_recipe.html#is-the-same-as-2","page":"Documented recipe with all features","title":"is the same as","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"filelists=[{name=name, transformer=changepath, aggregator=sharedlistto_file}] ```","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"You're free to specify as many aggregators as you like.","category":"page"},{"location":"documented_recipe.html#Under-the-hood","page":"Documented recipe with all features","title":"Under the hood","text":"","category":"section"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"When you define a template, a 'visitor' will walk over each 'node' in the filesystem graph, testing any conditions when appropriate, and executing actions or counteractions. (Image: Concept)","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"In the background there's a lot more going on","category":"page"},{"location":"documented_recipe.html","page":"Documented recipe with all features","title":"Documented recipe with all features","text":"Managing threadsafe data structures\nResolving counters and file lists\nLooking up functions\nComposing functions and conditions\n...","category":"page"},{"location":"installation.html#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"You can install DataCurator in  3 ways:","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"as a Julia package in your global Julia environment\nas a local package / cloned repository (no change to global)\nor download a container / executable image recommended","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"note: If you do not intend to write code, pick the container/image option\nThe container comes with Julia, so you don't need to install anything, and it has an optimized precompiled image of DataCurator inside so the startup time reduces to < 1s.","category":"page"},{"location":"installation.html#As-a-Julia-package","page":"Installation","title":"As a Julia package","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"You need:","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Julia","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"using Pkg;\nPkg.add(url=\"https://github.com/bencardoen/DataCurator.jl\")\nPkg.test(\"DataCurator\")\nusing DataCurator","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"or interactively","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"julia> ] # typing right bracket opens package manager\npkg 1.x> add https://github.com/bencardoen/DataCurator.jl\npkg 1.x> test DataCurator","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Note: when this repo is private this will prompt for username and github token (not psswd)","category":"page"},{"location":"installation.html#As-a-local-repository","page":"Installation","title":"As a local repository","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"You need:","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Julia\ngit","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"git clone git@github.com:bencardoen/DataCurator.jl.git ## Assumes ssh\n# git clone https://github.com/bencardoen/DataCurator.jl.git ## For non SSH\ncd DataCurator.jl\njulia\njulia>using Pkg; Pkg.activate(\".\"); Pkg.instantiate(); Pkg.Test();","category":"page"},{"location":"installation.html#As-an-executable-image","page":"Installation","title":"As an executable image","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"You need:","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"A command line environment (WSL on windows, any shell on Linux or MAC)","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"wget <URL TO DO>","category":"page"},{"location":"installation.html#As-a-Singularity-container","page":"Installation","title":"As a Singularity container","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"You need:","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"A command line environment (WSL on windows, any shell on Linux or MAC)\nSingularity","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"wget <URL TO DO>","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"The container provides:","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Fedora 35 base environment\nJulia 1.6.2 base installation\nDataCurator installed in its own environment at /opt/DataCurator.jl","category":"page"},{"location":"installation.html#Test","page":"Installation","title":"Test","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"If you want to verify everything works as it should:","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"using Pkg;\nPkg.test(\"DataCurator\")","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"or if you cloned the repository","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"using Pkg;\nPkg.activate('.')\nPkg.test('.')","category":"page"},{"location":"installation.html#Advanced-users","page":"Installation","title":"Advanced users","text":"","category":"section"},{"location":"installation.html#Changing-the-image","page":"Installation","title":"Changing the image","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"See buildimage.sh and singularity1p6.def on how the images are built if you want to modify them.","category":"page"},{"location":"installation.html#Speeding-up-start-up-time","page":"Installation","title":"Speeding up start-up time","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"On first run Julia needs to compile functions and load packages. If you process large datasets, this cost (up to 20s) is meaningless. However, for smaller use case its starts to get annoying.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"We avoid this cost by using [PackageCompiler.jl] by","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"run a typical example of DataCurator so Julia sees which functions are common\nprecompile all major dependencies into a system image\ntell Julia to use that image instead.","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"This is automated in the Singularity image, but for completeness:","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"julia --project=. src/mktest.jl\njulia --project=. --trace-compile=dc_precompile.jl src/curator.jl -r example_recipes/aggregate_new_api.toml\njulia --project=. src/setupimage.jl","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Now when you want to run DataCurator, do:","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"julia --project=/opt/DataCurator.jl --sysimage /opt/DataCurator.jl/sys_img.so /opt/DataCurator.jl/src/curator.jl --recipe <YOURRECIPE.TOML>","category":"page"},{"location":"reference.html#Reference","page":"API Reference","title":"Reference","text":"","category":"section"},{"location":"reference.html","page":"API Reference","title":"API Reference","text":"Modules = [DataCurator]","category":"page"},{"location":"reference.html#DataCurator.ParallelCounter","page":"API Reference","title":"DataCurator.ParallelCounter","text":"Usage\nQT = ParallelCount(zeros(Int64, Base.Threads.nthreads()), Int64(0))\nQT.data[threadid()] = ...\n\n\n\n\n\n","category":"type"},{"location":"reference.html#DataCurator.apply_to-Tuple{Any, Any}","page":"API Reference","title":"DataCurator.apply_to","text":"apply_to(x, f; base=true)\n\n    Where x is a path, if base=false, return f(x), otherwise works on the last part of the path\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.bottomup-Tuple{Any, Any, Any}","page":"API Reference","title":"DataCurator.bottomup","text":"topdown(node, expander, visitor; context=nothing, inner=expand_sequential)\n    Recursively apply visitor onto node, until expander(node) -> []\n    If context is nothing, the visitor function gets the current node as sole arguments.\n    Otherwise, context is expected to contain: \"node\" => node, \"level\" => recursion level.\n    Inner is the delegate function that will execute the expand phase. Options are : expand_sequential, expand_threaded\n\n    Traversal is done in a post-order way, e.g. visit after expanding. In other words, leaves before nodes, working from bottom to top.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.collapse_functions-Tuple{Any}","page":"API Reference","title":"DataCurator.collapse_functions","text":"collapse_functions(fs; left_to_right=false)\n\nGeneralization of (f, g) --> x->(f(g(x))) for any set of functions\nleft_to_right : g(f(x)), otherwise f(g(x))\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.decode_function-Tuple{AbstractDict, AbstractDict}","page":"API Reference","title":"DataCurator.decode_function","text":"decode_function(f::AbstractDict, glob::AbstractDict; condition=false)\n\nDispatched method for transform entries\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.delegate-Tuple{Any, Any}","page":"API Reference","title":"DataCurator.delegate","text":"delegate(config, template)\nUses the configuration, and template create by `create_template_from_toml', to execute the verifier as specified.\nReturns the counters and file lists, if any are defined.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.generate_counter","page":"API Reference","title":"DataCurator.generate_counter","text":"Make a count and counting functor that can be incremented by threads\n```\nc, ct = generate_counter()\nct(something)\n@info c # \"Counter = 1\"\n# Threaded version\npc, pct = generate_counter(true; x->reduce(*, size(x))))\na = zeros(3,3,3)\npct(a) # Threadsafe writes\n# Printing the counter is not threadsafe, only read when all threads have finished.\n@info pc # \"Counter = 27\"\n\n\n\n\n\n","category":"function"},{"location":"reference.html#DataCurator.parse_acsym-Tuple{Any, Any}","page":"API Reference","title":"DataCurator.parse_acsym","text":"Helper function to parse all functions\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.read_counter-Tuple{Any}","page":"API Reference","title":"DataCurator.read_counter","text":"read_counter(counter)\n\nSum a parallel or sequential counter where counter.data[threadid()]\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.reduce_images-Tuple{Any, AbstractString, AbstractString}","page":"API Reference","title":"DataCurator.reduce_images","text":"reduce_images(list, fname::AbstractString, op::AbstractString)\n\nGiven list of K-D images (tif), stack to K+1, then apply `op` along K+1 th dimension.\nSave to fname in K-D tif\n\nExample\nmaxproject = (list, fname) -> reduce_images(list, fname, \"maximum\")\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.send_to-Tuple{Any, Any, Any}","page":"API Reference","title":"DataCurator.send_to","text":"/a/b/c, /a/b/c/d/e, /x/y\n    if keeprelative\n    -> /x/y/c/d/e\n    if ~keeprelative\n    -> /x/y/e\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.tmpcopy-Tuple{Any}","page":"API Reference","title":"DataCurator.tmpcopy","text":"tmpcopy(x; seed=0, length=40)\n\nCreate a temporary copy of file x (with same extension), of length 40.\n40 means there's a 1/10000 for a collision of 2 identical files.\nNote that this function is used on executing a template, in parallel, so it's not the total of number files being processed, but the number of files being processed in the same window of time.\nReturn the temporary file name\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.topdown-Tuple{Any, Any, Any}","page":"API Reference","title":"DataCurator.topdown","text":"topdown(node, expander, visitor; context=nothing, inner=expand_sequential)\nRecursively apply visitor onto node, until expander(node) -> []\nIf context is nothing, the visitor function gets the current node as sole arguments.\nOtherwise, context is expected to contain: \"node\" => node, \"level\" => recursion level.\nInner is the delegate function that will execute the expand phase. Options are : expand_sequential, expand_threaded\n\nTraversal is done in a pre-order way, e.g. visit before expanding.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.transform_copy-Tuple{Any, Any}","page":"API Reference","title":"DataCurator.transform_copy","text":"transform_copy(x, f)\n    x' = f(x) for a file or directory, a copy rather than a move. Refuses to act if x' exists.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.transform_inplace-Tuple{Any, Any}","page":"API Reference","title":"DataCurator.transform_inplace","text":"transform_inplace(x, f)\n    x = f(x) for a file or directory. Refuses to act if x' exists.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.verifier-Tuple{Any, Dict, Int64}","page":"API Reference","title":"DataCurator.verifier","text":"verifier(node, templater::Dict, level::Int)\nDispatched function to verify at recursion level with conditions set in templater[level] for node.\nWill apply templater[-1] as default if it's given, else no-op.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.verify_dispatch-Tuple{Any}","page":"API Reference","title":"DataCurator.verify_dispatch","text":"verify_dispatch(context)\nUse multiple dispatch to call the right function verifier.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#DataCurator.verify_template-Tuple{Any, Any}","page":"API Reference","title":"DataCurator.verify_template","text":"verify_template(start, template; expander=expand_filesystem, traversalpolicy=bottomup, parallel_policy=\"sequential\")\nRecursively verifies a dataset anchored at start using a given template.\nFor example, start can be the top directory of a filesystem.\nA template has one of 2 forms:\n    - template = [(condition, action_on_fail), (condition, action), ...]\n        - where condition accepts a node and returns true if ok, false if not.\n        - action is a function that accepts a node as argument, and is trigger when condition fails, example warn_on_fail logs a warning\nTraversalpolicy is bottomup or topdown. For modifying actions bottomup is more stable.\nParallel_policy is one of \"sequential\" or \"parallel\". While parallel execution can be a lot faster, be very careful if your actions share global state.\n\n\n\n\n\n","category":"method"},{"location":"index.html#DataCurator.jl-Documentation","page":"Index","title":"DataCurator.jl Documentation","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"A multithreaded package to validate, curate, and transform large heterogeneous datasets using reproducible recipes, which can be created both in TOML human readable format, or in Julia.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"(Image: Concept)","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"DataCurator is a Swiss army knife that ensures:","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"pipelines can focus on the algorithm/problem solving\nhuman readable recipes for future reproducibility\nvalidation huge datasets at high speed\nout-of-the-box operation without the need for code or dependencies","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"(Image: Concept)","category":"page"},{"location":"index.html#Quickstart","page":"Index","title":"Quickstart","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"We'll show 2 simple examples on how to get started, for a more complete manual please see individual sections in the left pane.","category":"page"},{"location":"index.html#Validate","page":"Index","title":"Validate","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Check that a directory only contains CSV files, list them in a file, and list any file that's incorrect.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"[global]\ninputdirectory = \"testdir\"\n[any]\nconditions=[\"is_csv_file\"]\nactions = [[\"log_to_file\", \"non_csvs.txt\"]]\ncounter_actions=[[\"log_to_file\", \"csvs.txt\"]]","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Execute:","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"./DataCurator.sif -r myrecipe.toml","category":"page"},{"location":"index.html#Curate","page":"Index","title":"Curate","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Flatten all .txt files, flatten refers to extracting all files from a nested hierarchy (a directory with many subdirectories, each with their own subdirectories and so forth) into 1 single set of files in 1 directory, for ease of processing.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Create a recipe.toml file with:","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"[global]\nact_on_success = true\ninputdirectory = \"testdir\"\nregex=true\n[any]\nall=true\nconditions = [\"isfile\", [\"endswith\", \".*.txt\"]]\nactions = [[\"flatten_to\", \"outdir\"]]","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"./DataCurator.sif -r myrecipe.toml","category":"page"}]
}
