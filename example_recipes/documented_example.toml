## We start with a global section

[global]
# Where we start
inputdirectory="your/directory"
# if condition --> action
# For validation it"s easier to revert this, to only specify "x, y, and z should be true"
# So then you"d do act_on_success=false, condition[...], action=[warn_on_fail]
act_on_success=true

#If you're going to modify files in place, or delete, then this is the safest.
traversal="bottomup" # or topdown

# Parallel: if true, will use as many threads as $JULIA_NUM_THREADS (usually nr of HT cores)
parallel=true

# If true, your template is more precise, because you know what to look for at certain levels [level_i]
# If false, define your template in [any]
hierarchical=true

# Set global counters you can refer to later
# Without an extra function, just adds 1.
# Counters are threadsafe
# Format : counters = [name, [name, function_to_count]]
# Reference by action ["count", "name"]
counters = ["C1", ["C2", "function to apply to file when counting"]]

# If true, functions accepting patterns (endswith, startswith), will have their argument converted to a regular expression (using PRCE syntax)
regex = false

# Build lists of files, written to file at the end.
# Use in actions by an action = ["add_to_file_list", "infiles"]
# Lists with "table" in them are assumed to contain csvs to be fused into 1 table
file_lists = ["infiles", ["outfiles", "/dev/shm/outpath"], "table_x"]

#Next we describe what to do, and when, in other words, a template
# Format
# [any, level_1, level_...]  # When you set hierarchical to false, only 'any' is checked. Otherwise, list 'any' + level_i
# all=false,true # if false, 1 action per condition, else, all conditions are fused in a logical and, and all actions applied in sequence
# BE CAREFUL, if the first action = delete_file, the rest will likely crash, because you just deleted the file
# conditions = ["condition 1", ["condition with argument", "argument"], ...]
# actions = ["action", ["action with argument", "argument"]]

## Example

## In hierarchical, this will match whatever level you do NOT specify, aka default.
# For example, to delete any file at a level you"ve not specified below, but to ignore directories:
[any]
# Assume action_on_success=true
all=true
conditions=["isfile"]
actions=["show_warning", "delete_file"]

# Root directory
[level_1]
# Let"s say you only expect sub directories
conditions=["isfile"]
actions=["show_warning"]
counter_actions=[["log_to_file", "correct.txt"]]


[level_2]
# We know there's some csv files, with a pattern "July*.csv", that should be collected and merged. We also want to know just how large they are, and how many
all=true
conditions=["is_csv_file", ["startswith", "July"]]
actions=[["count", "C1"], ["count", "C2"], ["add_to_file_list", "table"]]
# This will give you at the end a count of files found, a size in bytes of all, and generate a fused table "table.csv"
# It's up to you to ensure those csv's can be merged, e.g. their columns are the same.

[level_3]
# Let"s say this is the deepest part, and you only expect 3D tif files, and they"re 3-channel RGB
# And let"s assume your collaborators have agreed to use the cell name as an integer at the beginning
all=true
conditions=["isfile", "is_img", "is_3d_img", "is_tif_file", "is_rgb"]
actions=[["flatten_to", "my/special/flat/directory"]]

## When complete, execute by
## ./curator.sif -r myrecipe.toml [-v]
